import sys
import asyncio
import struct
import time
import select
from time import sleep
sys.dont_write_bytecode = True

import queue
import sounddevice as sd

import discord
from discord.ext import tasks, commands
import threading

from multiprocessing import Process, Pipe, freeze_support

import wave
import numpy as np
import soundfile as sf
import speech_recognition as sr
# r = sr.Recognizer()
# r.pause_threshold = 1.0
# r.phrase_threshold = 1.0
# r.non_speaking_duration = 1.0

mic = sr.Microphone(device_index=0)



import pvcheetah

from tokens import YOUR_BOT_TOKEN, BOSS_ID

intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.members = True
client = commands.Bot(intents = intents, command_prefix = '.')

from vosk import Model, KaldiRecognizer

# model = Model(r"./model_small")
# recognizer = KaldiRecognizer(model, 96000)
# recognizer.SetWords(False)

async def shoa():
    print('done')
# async def finished_callback(sink):
#     print('callback')
#     files = [discord.File(audio.file, f"{user_id}.{sink.encoding}") for user_id, audio in sink.audio_data.items()]

#     for f in files:
#         f.fp.seek(0)
#         data = f.fp

#         with wave.open(data, "wb") as f:
#             f.setnchannels(client.voice_clients[0].decoder.CHANNELS)
#             f.setsampwidth(client.voice_clients[0].decoder.SAMPLE_SIZE // client.voice_clients[0].decoder.CHANNELS)
#             f.setframerate(client.voice_clients[0].decoder.SAMPLING_RATE)

#         data.seek(0)
#         audio_buffer = data.read()
#         audio_array = np.frombuffer(audio_buffer, dtype=np.int32, count=-1)
#         sf.write("recording.wav", audio_array, client.voice_clients[0].decoder.SAMPLING_RATE)

#         sr.AudioData()
#         with sr.AudioFile("./recording.wav") as source:
#             audio_data = r.record(source)
#             text = r.recognize_google(audio_data, language = 'bg-BG', show_all = True)
#             if text != []:
#                 print(text)
#                 for trans in text['alternative']:
#                     if trans['transcript'] == 'crazy':
#                         client.voice_clients[0].play(discord.FFmpegPCMAudio(executable="C:/ffmpeg/ffmpeg.exe", source="./voice/fipo/crazy.mp3"))

q = queue.Queue()

device_info = sd.query_devices(sd.default.device[0], 'input')

def recordCallback(indata, frames, time, status):
    if status:
        print(status, file=sys.stderr)
    q.put(bytes(indata))

import pyaudio

class Shoa():
    def __init__(self, voice):
        self.voice = voice
        self.t = None

    def thread(self):
        self.voice.set_decoder()
        self.t = threading.Thread(target=self.listen, args=())
        self.t.start()

    def listen(self):
        # with sd.RawInputStream(dtype='int16',
        #                 channels=1,

        #                 callback=recordCallback):

            # microphone_file = wave.open("microphone.wav", "wb")
            # microphone_file.setnchannels(1)
            # microphone_file.setsampwidth(pyaudio.PyAudio().get_sample_size(pyaudio.paInt16))
            # microphone_file.setframerate(44100)

            # discord_file = wave.open("discord.wav", "wb")
            # discord_file.setnchannels(1)
            # discord_file.setsampwidth(pyaudio.PyAudio().get_sample_size(pyaudio.paInt16))
            # discord_file.setframerate(96000)

        # start = time.time()
        while True:
        # while True:
            # print('_________________________________________________________________________')
            # print('micro')
            # data = q.get()
            # print(data)
            # microphone_file.writeframes(data)
            # print(data)
            # print('disco')
            data = self.voice.listen_for_audio()
            # q.put(data)
            # if data:
            #     discord_file.writeframes(data)
            # if data: 
            #     q.put(data)
            # print(data)
            # if data:
            #     with open("output.wav", "wb") as wav_file:
            #         wav_file.write(data)
            # audio_chunks.append(data)
            # print(audio_chunks)
            # print(dir(data))

            if data is None:
                data = b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x01\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x01\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'


            if recognizer.AcceptWaveform(data):
                result = recognizer.Result()
                q.put(result)
        print('end of recording')
                # print(recognizer.AcceptWaveform(data))
                # # with vosk.KaldiRecognizer(model, data) as recognizer:
                # result = recognizer.Result()
                # text = result["text"]
                # print(result)
            #     if recognizer.AcceptWaveform(data):
            #         recognizerResult = recognizer.Result()
            #         print(recognizerResult)
                # print(r.recognize_google(data))
                



                    # recognizerResult = recognizer.FinalResult()
                    # print(recognizerResult)
                # # convert the recognizerResult string into a dictionary  
                # resultDict = json.loads(recognizerResult)
                # if not resultDict.get("text", "") == "":
                #     print(recognizerResult)
                # else:
                #     print("no input sound")
                # decoded_bytes = base64.b64decode(data)
                # # hexadecimal_string = decoded_bytes.hex()
                # print(decoded_bytes)
                # print(data)
                # bytes_object = bytes.fromhex(data[1:])
                # print(bytes_object)
                # words = r.recognize_vosk(data)

                # print(words)
                # if recognizer.AcceptWaveform(decoded_bytes):
                #     recognizerResult = recognizer.Result()
                #     # convert the recognizerResult string into a dictionary  
                #     resultDict = json.loads(recognizerResult)
                #     if not resultDict.get("text", "") == "":
                #         print(recognizerResult)
                #     else:
                #         print("no input sound")

            # audio_data = b''.join(audio_chunks)

            # # Create a WAV file and write audio data to it
            # with wave.open("output.wav", "wb") as wav_file:
            #     # Set audio parameters
            #     wav_file.setnchannels(2)
            #     wav_file.setsampwidth(2)
            #     wav_file.setframerate(44100)
                
            #     # Write audio data to the WAV file
            #     wav_file.writeframes(audio_data)

def extract_text_between_second_quotes(input_string):
    first_quote_index = input_string.find('"')
    second_quote_index = input_string.find('"', first_quote_index + 1)
    third_quote_index = input_string.find('"', second_quote_index + 1)
    fourth_quote_index = input_string.find('"', third_quote_index + 1)
    
    if second_quote_index != -1:
        return input_string[third_quote_index + 1:fourth_quote_index]
    
    return None

@client.event
async def on_ready():
    print('We have logged in as {0.user}'.format(client))

    for guild in client.guilds:
        member = guild.get_member(BOSS_ID)
        if member and member.voice:
            voice = await member.voice.channel.connect()


    # # while True:
    # #     voice.shoa()
    # # with mic as source:
    # #     audio = r.listen(source)
    # #     await asyncio.sleep(5)
    # #     r.recognize_google(audio)
    # # shoa = Shoa(voice=voice)
    # # shoa.thread()
    # q = queue.Queue()
    # voice.start_listening(q)
    # start = time.time()
    # end = start + 3

    # while end > time.time():
    #     # pass
    #     data = q.get()
    #     # voice.shoa()
    #     # print(data)
    #     # if data is None:
    #     #     data = b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x01\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x01\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'

    #     # if recognizer.AcceptWaveform(data):
    #     #     result = recognizer.Result()
    #     #     print(result)
    
    # # voice.stop_recording()
    # voice.stop_listening()
    # print('______________________________________________________________________________________________out')
    # voice.start_listening(q)
    # start = time.time()
    # end = start + 13

    # while end > time.time():
    #     # pass
    #     data = q.get()
    #     if data:
    #         voice.shoa(data)
    #     # print(data)
    #     # if data is None:
    #     #     data = b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x01\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x01\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'

    #     # if recognizer.AcceptWaveform(data):
    #     #     result = recognizer.Result()
    #     #     print(result)
    
    # # voice.stop_recording()
    # voice.stop_listening()
    # print('______________________________________________________________________________________________out')
    # # while True:
    # #     result = q.get()
    # #     if result:
    # #         print(result)
    # #         try:
    # #             if extract_text_between_second_quotes(result) == 'crazy' or extract_text_between_second_quotes(result) == 'the crazy':
    # #                 client.voice_clients[0].play(discord.FFmpegPCMAudio(executable="C:/ffmpeg/ffmpeg.exe", source="./voice/fipo/crazy.mp3"))
    # #         except:
    # #             pass


    # # discord_file = wave.open("discord.wav", "wb")
    # # discord_file.setnchannels(1)
    # # discord_file.setsampwidth(pyaudio.PyAudio().get_sample_size(pyaudio.paInt16))
    # # discord_file.setframerate(88200)


    # # start = time.time()
    # # while time.time() < start + 10:
    # #     data = q.get()
    # #     if data and recognizer.AcceptWaveform(data):
    # #         result = recognizer.Result()
    # #         print(result)

    # # print('end')



    # # print(dir(voice))
    # # speaking_heartbeat, speaking_send_heartbeat = Pipe()
    # # speaking = Process(target=listen, args=(speaking_send_heartbeat, ))
    # # bot_things.start(voice)
    # # speaking.start()
    
    # # voice.start_recording(discord.sinks.WaveSink(), finished_callback)
    # # await asyncio.sleep(5)
    # # voice.stop_recording()

    # # while True:
    # #     print('shoa')
    # #     await asyncio.sleep(2)
    # # await asyncio.sleep(0.05)


# def is_speaking(self) -> bool:
        
#         self.empty_socket()

#         ready, _, err = select.select([self.socket], [], [self.socket], 0.01)
#         if not ready and err:
#             print(f"Socket error: {err}")

#         try:
#             data = self.socket.recv(4096)
#         except OSError:
#             return

#         if 200 <= data[1] <= 204:
#             # RTCP received.
#             # RTCP provides information about the connection
#             # as opposed to actual audio data, so it's not
#             # important at the moment.
#             return

#         data = RawData(data, self)

#         if data.decrypted_data == b"\xf8\xff\xfe":  # Frame of silence
#             return False
        
#         return True


# def listen(send):
#     while True:
#         print('sholocost')
#         print(client.voice_clients)
#         voice = client.voice_clients[0]
#         shoa = True
#         if shoa and not recording:
#             print('record')
#             voice.start_recording(discord.sinks.WaveSink(), finished_callback)
#             recording = True

#         elif not shoa and recording:
#             print('stop')
#             voice.stop_recording()
#             recording = False
        
#         sleep(0.1)


# @tasks.loop(seconds=0.01)
# async def bot_things(voice):
#     global counter
#     global recording

#     if voice.is_connected():

#         # partial_transcript, is_endpoint = handle.process(get_next_audio_frame())
#         if is_endpoint:
#             final_transcript = handle.flush()
        
#         print(partial_transcript)
#         print(final_transcript)

#         ready, _, err = select.select([voice.socket], [], [voice.socket], 0.01)
#         if not ready:
#             if err:
#                 print(f"Socket error: {err}")



#         try:
#             socket = voice.socket.recv(4096)
#             print(socket)
#             socket_len = len(socket)

#         except BlockingIOError as e:
#             print(e)
#             socket_len = 43

#         # if socket_len <= 52:
#         #     counter += 1
#         # else:
#         #     counter = 0

#         # if socket_len <= 52 and counter > 2:
#         #     shoa = False
#         # else:
#         #     shoa = True

#         # if counter == 0:
#         #     voice.start_recording(discord.sinks.WaveSink(), finished_callback)
#         #     print('recording')

#         # if counter == 500:
#         #     voice.stop_recording()
#         #     print('stop')
            
#         counter += 1
#         print(socket_len)
#         # if shoa and not recording:
#         #     print('record')
#         #     voice.start_recording(discord.sinks.WaveSink(), finished_callback)
#         #     recording = True

#         # elif not shoa and recording:
#         #     print('stop')
#         #     voice.stop_recording()
#         #     await asyncio.sleep(0.05)
#         #     recording = False

@client.event
async def on_voice_state_update(member, before, after):
    if after:
        print(client.voice_clients[0].ws.ssrc_map)
    if member.id == BOSS_ID and before.channel is not after.channel:
        if client.voice_clients == [] and after.channel is not None:
            await after.channel.connect()
        elif client.voice_clients != []:
            await client.voice_clients[0].move_to(after.channel)
    # elif member.id == BOT_ID and before.channel is not after.channel:
    #     if client.voice_clients == []:
    #         await before.channel.connect()
    #     else:
    #         await client.voice_clients[0].move_to(before.channel)


def main():
    client.run(YOUR_BOT_TOKEN)


if __name__ == "__main__":
    main()





























# # mic = sr.Microphone()
# recording_sink = discord.sinks.WaveSink()
# import numpy as np
# import wavio as wv
# from os import path, remove
# import pyttsx3
# from dis import disco
# from discord.utils import get


# @client.command(pass_context = True)
# async def read(ctx):
#     # subprocess.call(['ffmpeg', '-i', 'quote.mp3', 'quote.wav'])
#     quote = "quote.wav"
#     with sr.AudioFile(quote) as source:
#         # listen for the data (load audio to memory)
#         audio_data = r.record(source)
#         # print(type(audio_data))
#         # recognize (convert from speech to text)
#         text = r.recognize_google(audio_data, language = 'en-EN')
#         print(text)

# @client.command(name="ping")
# async def ping(ctx: commands.Context):
#     await ctx.send(f"Pong! {round(client.latency * 1000)}ms")


# @client.command()
# async def play(ctx, url):
#     server = ctx.message.guild
#     voice_client = ctx.message.author.voice.channel
#     player = await voice_client.create_ytdl_player(url)
#     players[server.id] = player
#     player.start()

# readable, _, _ = select.select([voice.socket], [], [], 0.1)


# byte_sequence = b'\x90xx\xa6s\xfb{k\x00\x05Z\x93\x88\x88E\xd9:^`0\x10@\x19[\xa5c\x0f\xfbG\x9da\x15\x08\xc3\xc4Hs\xa2\x9e\xe5[\xbac\\\x12d\x0c\xc7,\xd03;\x02w\xb6l\t\xef\x81\xbe\xfbuH\xa7\xd0\x10:1 l)&4\x06\x1bJ\xfa]\xa9\x9d\xf1\xf7\xaff\x97\xaf\x03\xaa\x1a\x1a\x8d)\xdbNH\x862S\xec\x92|[D61\x97\xafWa.\x9cf>\xba\x89\xa4\x11)\xf4\xf8\xc5a\xef\xadP\x8a\xd7\x7f\xe2x\xa9\xe8\x1b\xf6\x8a_\xaf\xdc^\xc0\xae\xe5\xb1\xec\xe0\xb53\xb7@\xebtE\xd6\xde\x99\x85\x03\xea\xd7j\x9bI\xd5\xec6U\x1f\xaei\xd8\x03Md\x81\xef\x85\xcf"\x9ch\xaeOu\x0f\x82YX\xad\xd0N\xd4\xa4\xdc\xbc\xb1z\xd7\xbf\x80\xf9M\xc8\xaf\xb3\x0e\xa6[C2\x18ZK\xb0\xd8\xc5\x83}H\x8c\xb6\xcf\xc8ak\x97\\\x10q<t\xf8"c\xe4\xb5\xb4\xfc\xda8}<\x17\x1c\xd3\xcb\xdd\'[]<\x9f\x9d\\\x0b}\xed%Rv\xb1be\xfa\x89\x9e\xb7)a\xfd\xfd\xe11\xfe\xaf\xbe\xe8\xaa\xa8\x17\xd8\x9f\xd4\xff\\\n\xb3\xdc\xbe\x7f]M\x0f\x00\x00\x00'

# # Attempt to decode the byte sequence using UTF-8 encoding
# try:
#     decoded_string = byte_sequence.decode('utf-8')
#     print("Decoded string:", decoded_string)
# except UnicodeDecodeError:
#     print("Failed to decode the byte sequence with UTF-8 encoding.")



# import torch
# import torch.multiprocessing as mp
# import torchaudio
# from torchaudio.io import StreamReader
 
# ITERATIONS = 100
# def stream(queue: mp.Queue(),
#    format: str,
#    src: str,
#    frames_per_chunk: int,
#    sample_rate: int):
#    '''Streams audio data
  
#    Parameters:
#        queue: Queue of data chunks
#        format: Format
#        src: Source
#        frames_per_chunk: How many frames are in each data chunk
#        sample_rate: Sample rate
 
#    Returns:
#        None'''
#    print("Initializing Audio Stream")
#    streamer = StreamReader(src, format=format)
#    streamer.add_basic_audio_stream(frames_per_chunk=frames_per_chunk,
#        sample_rate=sample_rate)
#    print("Streaming\n")
#    stream_iterator = streamer.stream(timeout=-1, backoff=1.0)
#    for _ in range(ITERATIONS):
#        (chunk,) = next(stream_iterator)
#        queue.put(chunk)
 
# class InferencePipeline:
#    '''Creates an inference pipeline for streaming audio data'''
#    def __init__(self,
#        pipeline: torchaudio.pipelines.RNNTBundle,
#        beam_width: int=10):
#        '''Initializes TorchAudio RNNT Pipeline
      
#        Parameters:
#            pipeline: TorchAudio Pipeline to use
#            beam_width: Beam width
 
#        Returns:
#            None'''
 
#        self.pipeline = pipeline
#        self.feature_extractor = pipeline.get_streaming_feature_extractor()
#        self.decoder = pipeline.get_decoder()
#        self.token_processor = pipeline.get_token_processor()
#        self.beam_width = beam_width
#        self.state = None
#        self.hypothesis = None
  
#    def infer(self, segment: torch.Tensor) -> str:
#        '''Runs inference using the initialized pipeline
      
#        Parameters:
#            segment: Torch tensor with features to extract
      
#        Returns:
#            Transcript as string type'''
 
#        features, length = self.feature_extractor(segment)
#        predictions, self.state = self.decoder.infer(
#            features, length, self.beam_width, state=self.state,
#            hypothesis=self.hypothesis
#        )
#        self.hypothesis = predictions[0]
#        transcript = self.token_processor(self.hypothesis[0], lstrip=False)
#        return transcript
 
# class ContextCacher:
#    def __init__(self, segment_length: int, context_length: int):
#        '''Creates initial context cache
      
#        Parameters:
#            segment_length: length of one audio segment
#            context_length: length of the context
 
#        Returns:
#            None'''
#        self.segment_length = segment_length
#        self.context_length = context_length
#        self.context = torch.zeros([context_length])
  
#    def __call__(self, chunk: torch.Tensor):
#        '''Adds chunk to context and returns it
      
#        Parameters:
#            chunk: chunk of audio data to process
      
#        Returns:
#            Tensor'''
#        if chunk.size(0) < self.segment_length:
#            chunk = torch.nn.functional.pad(chunk,
#                (0, self.segment_length - chunk.size(0)))
#        chunk_with_context = torch.cat((self.context, chunk))
#        self.context = chunk[-self.context_length :]
#        return chunk_with_context

# def main(device: str, src: str, bundle: torchaudio.pipelines):
#    '''Transcribed audio data from the mic
  
#    Parameters:
#        device: Input device name
#        src: Source from input
#        bundle: TorchAudio pipeline
  
#    Returns:
#        None'''
#    pipeline = InferencePipeline(bundle)
  
#    sample_rate = bundle.sample_rate
#    segment_length = bundle.segment_length * bundle.hop_length
#    context_length = bundle.right_context_length * bundle.hop_length
  
#    cacher = ContextCacher(segment_length, context_length)
  
#    @torch.inference_mode()
#    def infer():
#        for _ in range(ITERATIONS):
#            chunk = q.get()
#            segment = cacher(chunk[:,0])
#            transcript = pipeline.infer(segment)
#            print(transcript, end="", flush=True)
  
#    ctx = mp.get_context("spawn")
#    q = ctx.Queue()
#    p = ctx.Process(target=stream, args=(q, device, src, segment_length, sample_rate))
#    p.start()
#    infer()
#    p.join()
# if __name__ == "__main__":
#    main(
#        device="avfoundation",
#        src=":1",
#        bundle=torchaudio.pipelines.EMFORMER_RNNT_BASE_LIBRISPEECH
#    )


import queue
import sounddevice as sd
from vosk import Model, KaldiRecognizer
import sys
import json

'''This script processes audio input from the microphone and displays the transcribed text.'''
    
# list all audio devices known to your system
print("Display input/output devices")
print(sd.query_devices())


# get the samplerate - this is needed by the Kaldi recognizer
device_info = sd.query_devices(sd.default.device[0], 'input')
samplerate = int(device_info['default_samplerate'])
print(samplerate)

# display the default input device
print("===> Initial Default Device Number:{} Description: {}".format(sd.default.device[0], device_info))

# setup queue and callback function
q = queue.Queue()

def recordCallback(indata, frames, time, status):
    if status:
        print(status, file=sys.stderr)
    q.put(bytes(indata))
    
# build the model and recognizer objects.
print("===> Build the model and recognizer objects.  This will take a few minutes.")
model = Model(r".\model")
recognizer = KaldiRecognizer(model, samplerate)
# recognizer.
recognizer.SetWords(False)

print(dir(recognizer))

print("===> Begin recording. Press Ctrl+C to stop the recording ")
try:
    with sd.RawInputStream(dtype='int16',
                           channels=1,

                           callback=recordCallback):
        while True:
            data = q.get()
            # print(data)
            # print('out')
            if recognizer.AcceptWaveform(data):
                print('in')
                recognizerResult = recognizer.Result()
                print(recognizerResult)
                recognizerResult = recognizer.FinalResult()
                print(recognizerResult)
                # # convert the recognizerResult string into a dictionary  
                # resultDict = json.loads(recognizerResult)
                # if not resultDict.get("text", "") == "":
                #     print(recognizerResult)
                # else:
                #     print("no input sound")

except KeyboardInterrupt:
    print('===> Finished Recording')
except Exception as e:
    print(str(e))


# from vosk import Model, KaldiRecognizer, SetLogLevel
# import subprocess

# # initialize variables
# SetLogLevel(0)
# sample_rate=16000
# model = Model(r".\vosk-model-en-us-0.22")
# streamURL = "http://listen.noagendastream.com/noagenda"

# # create recognizer
# recognizer = KaldiRecognizer(model, sample_rate)

# # create ffmpeg process to read the stream
# process = subprocess.Popen(['ffmpeg', '-loglevel', 'quiet', '-i',
#                             streamURL,
#                             '-ar', str(sample_rate) , '-ac', '1', '-f', 's16le', '-'],
#                             stdout=subprocess.PIPE)

# while True:
#     data = process.stdout.read(4000)
#     if len(data) == 0:
#         print("end of stream")
#         break
#     if recognizer.AcceptWaveform(data):
#         print(recognizer.Result())
# #    else:
# #        print(recognizer.PartialResult())

# print(recognizer.FinalResult())
# print("End Stream Transcription")


# import speech_recognition as sr
# import vosk

# # Initialize the recognizer
# recognizer = sr.Recognizer()
# print(dir(recognizer))
# recognizer.pause_threshold = 0.1
# recognizer.phrase_threshold = 1
# recognizer.non_speaking_duration = 0.1
# sentence = ""

# # model = vosk.Model("./vosk-model-en-us-0.22")

# # Open the microphone and start recording
# with sr.Microphone() as source:
#     print("Listening...")

#     # Adjust for ambient noise
#     recognizer.adjust_for_ambient_noise(source)

#     try:
#         while True:
#             # Capture audio in real-time
#             audio = recognizer.listen(source)

#             # Use Google Web Speech API to recognize the audio
#             # Set show_all=True to get multiple alternatives
#             words = recognizer.recognize_vosk(audio)

#             print(words)
#             # Extract recognized words and accumulate them into a sentence
#             # for result in words.get("alternative", []):
#             #     recognized_word = result["transcript"]
#             #     sentence += recognized_word + " "  # Combine words with spaces
#             #     print("Sentence:", sentence)

#     except KeyboardInterrupt:
#         print("Stopped listening.")